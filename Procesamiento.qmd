---
title: "Procesamiento"
format: html
---

## Procesamiento datos eps 2004 a 2024

### Cargamos librerias

```{r}
# install.packages("pacman")
library(pacman)

pacman::p_load(
  dplyr,
  haven,
  purrr
)

options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
```

### Funcion para quitar labels

```{r}

limpiar_labels <- function(df) {
  df %>%
    mutate(across(everything(), ~ {
      # Eliminar atributo 'label'
      attr(., "label") <- NULL
      # Convertir labelled a su tipo base (por ejemplo, double)
      if (is.labelled(.)) {
        as_vector(.)
      } else {
        .
      }
    }))
}
```

### Carga de datos 2015

```{r}

#modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
#modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
#modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
#modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
```

### Carga de datos 2020

```{r}

modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")

modulo_c_2020 <- modulo_c_2020 %>% 
  mutate(c34=c34_ed)

modulo_d_2020 <- modulo_d_2020 %>% 
  mutate(
    d37m_2 = d37m_2_ed,
    d37m_3 = d37m_3_ed,
    d37m_5 = d37m_5_ed,
    d37m_6 = d37m_6_ed,
    d37m_7 = d37m_7_ed,
    d37m_8 = d37m_8_ed,
    d37m_9 = d37m_9_ed,
    d37m_10 = d37m_10_ed,
    d37m_11 = d37m_10_ed,
    d37m_12 = d37m_10_ed
  ) %>% 
  select(-(ends_with("ed")))
```

### Carga datos 2024

```{r}

modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")

```

### Unimos los datos de 2020 y 2024 por separado (a, b y c)

```{r}

columna_folio <- "folio_n20"

unir_modulos_por_folio <- function(lista_df, col_folio) {
  # Verificar que la columna folio exista en todos los dataframes de la lista
  for (i in seq_along(lista_df)) {
    df_actual <- lista_df[[i]]
    nombre_df_original <- deparse(substitute(lista_df)) # Intenta obtener el nombre, puede ser genérico
    if (!col_folio %in% names(df_actual)) {
      stop(paste0("Error: La columna folio '", col_folio, 
                  "' NO se encuentra en el dataframe #", i, 
                  " de la lista (nombres de columna: ", paste(head(names(df_actual), 5), collapse=", "), "...). ",
                  "Asegúrate de que '", col_folio, "' exista y tenga el mismo nombre en todos los módulos."))
    }
  }
  
  Reduce(function(df1, df2) {
    full_join(df1, df2, by = col_folio)
  }, lista_df)
}

lista_dataframes_2020 <- list(modulo_a_2020, modulo_c_2020, modulo_d_2020)
datos_2020_consolidados <- unir_modulos_por_folio(lista_dataframes_2020, columna_folio)
cat("Dimensiones de datos consolidados 2020 (raw):", dim(datos_2020_consolidados), "\n")
cat("Folios únicos en 2020 consolidados:", n_distinct(datos_2020_consolidados[[columna_folio]]), "\n")

lista_dataframes_2024 <- list(modulo_a_2024, modulo_c_2024, modulo_d_2024)
datos_2024_consolidados <- unir_modulos_por_folio(lista_dataframes_2024, columna_folio)
cat("Dimensiones de datos consolidados 2024 (raw):", dim(datos_2024_consolidados), "\n")
cat("Folios únicos en 2024 consolidados:", n_distinct(datos_2024_consolidados[[columna_folio]]), "\n")

```

```{r}

# Creamos columna año para cada ola

datos_2020_con_año <- datos_2020_consolidados %>% mutate(año = 2020)
datos_2020_con_año <- limpiar_labels(datos_2020_con_año)
datos_2024_con_año <- datos_2024_consolidados %>% mutate(año = 2024)
datos_2024_con_año <- limpiar_labels(datos_2024_con_año)
datos_2024_con_año <- datos_2024_con_año %>% 
  mutate(a8=a8.x,
         a9=a9.x)
```

```{r}

# --- PASO 5: Apilar los dataframes de 2020 y 2024 (ahora con columnas idénticas) ---
# `bind_rows` apilará los dataframes. Como ahora tienen exactamente el mismo conjunto de columnas,
# la alineación será perfecta.
datos_apilados_raw <- bind_rows(datos_2020_con_año, datos_2024_con_año)

cat("\nDimensiones de datos apilados (después de seleccionar columnas comunes, antes de filtrar folios):", dim(datos_apilados_raw), "\n")
cat("Nombres de columnas en datos_apilados_raw:\n")
print(names(datos_apilados_raw))


# --- PASO 6: Filtrar para conservar solo los folios presentes en AMBOS años ---

# Contamos cuántos años distintos tiene cada folio en los datos apilados.
folios_con_conteo_años <- datos_apilados_raw %>%
  group_by(!!sym(columna_folio)) %>%
  summarise(n_años_presente = n_distinct(año), .groups = 'drop')

# Nos quedamos con los folios que están presentes en 2 años distintos
folios_a_mantener <- folios_con_conteo_años %>%
  filter(n_años_presente == 2) %>%
  pull(!!sym(columna_folio))

# Filtramos el dataframe apilado original para mantener solo estos folios
datos_longitudinales_final <- datos_apilados_raw %>%
  filter(!!sym(columna_folio) %in% folios_a_mantener)

# Opcional: Ordenar para ver los datos por folio y luego por año
datos_longitudinales_final <- datos_longitudinales_final %>%
  arrange(!!sym(columna_folio), año)

# --- PASO 7: Verificación final ---
cat("\nDimensiones finales de datos longitudinales (formato largo, solo columnas comunes):", dim(datos_longitudinales_final), "\n")
cat("Folios únicos en el dataset final (presentes en ambos años):", n_distinct(datos_longitudinales_final[[columna_folio]]), "\n")

# Verificar que cada folio tenga 2 entradas (una por año)
conteo_filas_por_folio <- datos_longitudinales_final %>%
  count(!!sym(columna_folio))
cat("\nResumen del número de filas por folio en el dataset final:\n")
print(table(conteo_filas_por_folio$n)) # Debería mostrar solo "2" y su frecuencia.

# Inspeccionar las primeras filas
cat("\nPrimeras filas del dataset longitudinal (formato largo):\n")
print(head(datos_longitudinales_final, 10))
cat("\nNombres de columnas del dataset longitudinal (formato largo):\n")
print(names(datos_longitudinales_final))
```

```{r}

datos_longitudinales_final <- datos_longitudinales_final %>%
  select(folio_n20, starts_with("d37m"), c34, a8, a9, año)

saveRDS(datos_longitudinales_final, "./datos_proc/datos_ingreso_deuda.rds")

```

## Procedimiento EGP

```{r}
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_b_2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")

modulo_b_2020 <- modulo_b_2020 %>% 
  select(folio_n20, CIUO_08_1dig, orden)

modulo_b_2020$CIUO_08_1dig[modulo_b_2020$CIUO_08_1dig %in% c(7777, 10000)] <- NA
modulo_b_2020 <- modulo_b_2020[!is.na(modulo_b_2020$CIUO_08_1dig), ]

datos_ciuo8_2020 <- modulo_b_2020 %>%
  group_by(folio_n20) %>%
  filter(orden == max(orden, na.rm = TRUE)) %>%
  ungroup()

modulo_b_2024 <- modulo_b_2024 %>% 
  select(folio_n20, CIUO_08_1dig, orden)

modulo_b_2024$CIUO_08_1dig[modulo_b_2024$CIUO_08_1dig %in% c(7777, 10000)] <- NA
modulo_b_2024 <- modulo_b_2024[!is.na(modulo_b_2024$CIUO_08_1dig), ]

datos_ciuo8_2024 <- modulo_b_2024 %>%
  group_by(folio_n20) %>%
  filter(orden == max(orden, na.rm = TRUE)) %>%
  ungroup()


datos_ciuo8_2020 <- datos_ciuo8_2020 %>%
  mutate(año = 2020)

datos_ciuo8_2024 <- datos_ciuo8_2024 %>%
  mutate(año = 2024)

# Unir ambas bases en formato largo
ciuo8all <- bind_rows(datos_ciuo8_2020, datos_ciuo8_2024)

# Filtrar solo los folios que están presentes en ambos años
folios_comunes <- ciuo8all %>%
  group_by(folio_n20) %>%
  summarise(n_años = n_distinct(año)) %>%
  filter(n_años == 2) %>%
  pull(folio_n20)

# Mantener solo los casos con folio presente en ambos años
ciuo8all <- ciuo8all %>%
  filter(folio_n20 %in% folios_comunes)

ingreso_deuda_proc <- readRDS("./datos_proc/datos_ingreso_deuda.rds")

datos_all <- left_join(ciuo8all, ingreso_deuda_proc)

vars_d37m <- c(
  "d37m_2", "d37m_3", "d37m_5", "d37m_6", "d37m_7", 
  "d37m_8", "d37m_9", "d37m_10", "d37m_11", "d37m_12"
)

datos_all[vars_d37m] <- lapply(datos_all[vars_d37m], function(x) {
  x[x %in% c(8, 9)] <- NA
  return(x)
})


datos_final <- datos_all %>%
  filter(rowSums(!is.na(across(all_of(vars_d37m)))) > 0)
```

```{r}

# Contamos cuántos años distintos tiene cada folio en los datos apilados.
folios_con_conteo_años <- datos_final %>%
  group_by(!!sym("folio_n20")) %>%
  summarise(n_años_presente = n_distinct(año), .groups = 'drop')

# Nos quedamos con los folios que están presentes en 2 años distintos
folios_a_mantener <- folios_con_conteo_años %>%
  filter(n_años_presente == 2) %>%
  pull(!!sym("folio_n20"))

# Filtramos el dataframe apilado original para mantener solo estos folios
datos_final <- datos_final %>%
  filter(!!sym("folio_n20") %in% folios_a_mantener)

# Opcional: Ordenar para ver los datos por folio y luego por año
datos_final <- datos_final %>%
  arrange(!!sym("folio_n20"), año)

saveRDS(datos_final, "./datos_proc/datos-egp-deuda-ingreso.rds")
```

### To do

-   Revisar que no se pierdan columnas relevante

-   Calcular el ingreso anual (discutir, por mientras haría cualquiera de las dos)

    -   Para esto hay que o sumar los datos de ingreso de los individuos

    -   Creo que hay una variable de ingreso mensual promedio, que es menos exacta ya que la responde la persona, pero por mientras podría servir.

    -   Crear una variable ingreso-calculo (o un nombre más explicativo) para cada folio en ambos ciclos. Esta servirá para calcular el ratio de deuda total sobre ingreso.

-   Extraer el ciuo8 de la historia laboral:

    -   Para esto hay que seleccionar solo el último ciclo del módulo de historia laboral por cada individuo. Si justo estaba cesante, quedarse con el último trabajado (discutir esto último)

    -   Para cada individuo dejar solo el último dato de su posición ciuo8. Debería quedar una fila por individuo

-   Calcular el rci_dt de cada folio (individuo)

    -   Para esto primero hay que calcular la deuda total. Hay varias variables en el módulo D 'd37m_x_ed' que tienen montos de deuda por diferentes tipos. Hay que sumarla toda y crear una variable 'deuda total'
    -   OJO con los valores NA (revisar cuales son)

-   Crear EGP en base a la categoría CIUO8 final

-   Ver relación bivariada entre EGP y rci_dt en la muestra completa

-   Realizar un par de gráficos: propongo gráficos de barra entre EGP y rci-dt
