# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
modulo_a_entrevistado_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_historia_laboral_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_entrevistado_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_entrevistado_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_entrevistado_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b_historia_laboral_2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_entrevistado_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_entrevistado_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
View(modulo_a_entrevistado_2020)
View(modulo_a_entrevistado_2024)
View(modulo_b_historia_laboral_2020)
View(modulo_b_historia_laboral_2024)
View(modulo_b_historia_laboral_2020)
View(modulo_d_entrevistado_2020)
print(names(modulo_d_entrevistado_2020))
print(names(modulo_c_entrevistado_2020))
View(modulo_d_entrevistado_2020)
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
modulo_a_entrevistado_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
View(modulo_a_entrevistado_2020)
modulo_a_entrevistado_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_historia_laboral_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_entrevistado_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_entrevistado_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
View(modulo_b_historia_laboral_2020)
modulo_a_entrevistado_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b_historia_laboral_2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_entrevistado_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_entrevistado_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
View(modulo_d_entrevistado_2024)
View(modulo_d_entrevistado_2020)
modulo_a_entrevistado_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
modulo_a_entrevistado_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_historia_laboral_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_entrevistado_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_entrevistado_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_entrevistado_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b_historia_laboral_2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_entrevistado_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_entrevistado_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
modulo_b_test <- read_stata("./datos-2015/MODULOB_Entrevistado.dta")
View(modulo_b_test)
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
#modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
#modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
#modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
#modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
View(modulo_a_2020)
View(modulo_a_2024)
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven,
purrr
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
#modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
#modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
#modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
#modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
columna_folio <- "folio_n20"
unir_modulos_por_folio <- function(lista_df, col_folio) {
# Verificar que la columna folio exista en todos los dataframes de la lista
for (i in seq_along(lista_df)) {
df_actual <- lista_df[[i]]
nombre_df_original <- deparse(substitute(lista_df)) # Intenta obtener el nombre, puede ser genérico
if (!col_folio %in% names(df_actual)) {
stop(paste0("Error: La columna folio '", col_folio,
"' NO se encuentra en el dataframe #", i,
" de la lista (nombres de columna: ", paste(head(names(df_actual), 5), collapse=", "), "...). ",
"Asegúrate de que '", col_folio, "' exista y tenga el mismo nombre en todos los módulos."))
}
}
Reduce(function(df1, df2) {
full_join(df1, df2, by = col_folio)
}, lista_df)
}
lista_dataframes_2020 <- list(modulo_a_2020, modulo_c_2020, modulo_d_2020)
datos_2020_consolidados <- unir_modulos_por_folio(lista_dataframes_2020, columna_folio)
cat("Dimensiones de datos consolidados 2020 (raw):", dim(datos_2020_consolidados), "\n")
cat("Folios únicos en 2020 consolidados:", n_distinct(datos_2020_consolidados[[columna_folio]]), "\n")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven,
purrr
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
#modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
#modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
#modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
#modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
columna_folio <- "folio_n20"
unir_modulos_por_folio <- function(lista_df, col_folio) {
# Verificar que la columna folio exista en todos los dataframes de la lista
for (i in seq_along(lista_df)) {
df_actual <- lista_df[[i]]
nombre_df_original <- deparse(substitute(lista_df)) # Intenta obtener el nombre, puede ser genérico
if (!col_folio %in% names(df_actual)) {
stop(paste0("Error: La columna folio '", col_folio,
"' NO se encuentra en el dataframe #", i,
" de la lista (nombres de columna: ", paste(head(names(df_actual), 5), collapse=", "), "...). ",
"Asegúrate de que '", col_folio, "' exista y tenga el mismo nombre en todos los módulos."))
}
}
Reduce(function(df1, df2) {
full_join(df1, df2, by = col_folio)
}, lista_df)
}
lista_dataframes_2020 <- list(modulo_a_2020, modulo_c_2020, modulo_d_2020)
datos_2020_consolidados <- unir_modulos_por_folio(lista_dataframes_2020, columna_folio)
cat("Dimensiones de datos consolidados 2020 (raw):", dim(datos_2020_consolidados), "\n")
cat("Folios únicos en 2020 consolidados:", n_distinct(datos_2020_consolidados[[columna_folio]]), "\n")
lista_dataframes_2024 <- list(modulo_a_2024, modulo_c_2024, modulo_d_2024)
datos_2024_consolidados <- unir_modulos_por_folio(lista_dataframes_2024, columna_folio)
cat("Dimensiones de datos consolidados 2024 (raw):", dim(datos_2024_consolidados), "\n")
cat("Folios únicos en 2024 consolidados:", n_distinct(datos_2024_consolidados[[columna_folio]]), "\n")
View(datos_2020_consolidados)
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven,
purrr
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
#modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
#modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
#modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
#modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
# install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr,
haven,
purrr
)
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
#modulo_a_2015 <- read_stata("./datos-2015/MODULOA_Entrevistado.dta")
#modulo_b_2015 <- read_stata("./datos-2015/MODULOB_Historia_Laboral.dta")
#modulo_c_2015 <- read_stata("./datos-2015/MODULOC_Entrevistado.dta")
#modulo_d_2015 <- read_stata("./datos-2015/MODULOD_Entrevistado.dta")
modulo_a_2020 <- read_stata("./datos-2020/MODULO_A_Entrevistado_in.dta")
modulo_b_2020 <- read_stata("./datos-2020/MODULO_B_Historia_Laboral_in.dta")
modulo_c_2020 <- read_stata("./datos-2020/MODULO_C_Entrevistado_in.dta")
modulo_d_2020 <- read_stata("./datos-2020/MODULO_D_Entrevistado_in.dta")
modulo_a_2024 <- read_stata("./datos-2024/MODULO_A_ENTREVISTADO.dta")
modulo_b__2024 <- read_stata("./datos-2024/MODULO_B_HISTORIA_LABORAL.dta")
modulo_c_2024 <- read_stata("./datos-2024/MODULO_C_ENTREVISTADO.dta")
modulo_d_2024 <- read_stata("./datos-2024/MODULO_D_ENTREVISTADO.dta")
columna_folio <- "folio_n20"
unir_modulos_por_folio <- function(lista_df, col_folio) {
# Verificar que la columna folio exista en todos los dataframes de la lista
for (i in seq_along(lista_df)) {
df_actual <- lista_df[[i]]
nombre_df_original <- deparse(substitute(lista_df)) # Intenta obtener el nombre, puede ser genérico
if (!col_folio %in% names(df_actual)) {
stop(paste0("Error: La columna folio '", col_folio,
"' NO se encuentra en el dataframe #", i,
" de la lista (nombres de columna: ", paste(head(names(df_actual), 5), collapse=", "), "...). ",
"Asegúrate de que '", col_folio, "' exista y tenga el mismo nombre en todos los módulos."))
}
}
Reduce(function(df1, df2) {
full_join(df1, df2, by = col_folio)
}, lista_df)
}
lista_dataframes_2020 <- list(modulo_a_2020, modulo_c_2020, modulo_d_2020)
datos_2020_consolidados <- unir_modulos_por_folio(lista_dataframes_2020, columna_folio)
cat("Dimensiones de datos consolidados 2020 (raw):", dim(datos_2020_consolidados), "\n")
cat("Folios únicos en 2020 consolidados:", n_distinct(datos_2020_consolidados[[columna_folio]]), "\n")
lista_dataframes_2024 <- list(modulo_a_2024, modulo_c_2024, modulo_d_2024)
datos_2024_consolidados <- unir_modulos_por_folio(lista_dataframes_2024, columna_folio)
cat("Dimensiones de datos consolidados 2024 (raw):", dim(datos_2024_consolidados), "\n")
cat("Folios únicos en 2024 consolidados:", n_distinct(datos_2024_consolidados[[columna_folio]]), "\n")
# Creamos columna año para cada ola
datos_2020_con_año <- datos_2020_consolidados %>% mutate(año = 2020)
datos_2024_con_año <- datos_2024_consolidados %>% mutate(año = 2024)
View(datos_2020_con_año)
View(datos_2024_con_año)
# --- PASO 4: Seleccionar solo columnas comunes a ambos años ---
nombres_cols_2020 <- names(datos_2020_con_año)
nombres_cols_2024 <- names(datos_2024_con_año)
# Encontrar las columnas que son comunes a ambos dataframes
# Esto incluirá 'folio_n20' y 'año' si los pasos anteriores se ejecutaron correctamente.
columnas_comunes_finales <- intersect(nombres_cols_2020, nombres_cols_2024)
# Informar al usuario qué columnas se mantendrán y cuáles se descartarán
message("\n--- Selección de Columnas Comunes para Apilar ---")
if (length(columnas_comunes_finales) > 0) {
message(paste("Se mantendrán las siguientes", length(columnas_comunes_finales),
"columnas porque tienen el mismo nombre en los datasets de 2020 y 2024:"))
print(sort(columnas_comunes_finales)) # Imprime en orden alfabético para fácil revisión
} else {
stop("Error: No se encontraron columnas comunes entre los datasets de 2020 y 2024. ",
"Esto podría indicar un problema con los nombres de las columnas o los pasos anteriores. ",
"Al menos '", columna_folio, "' y 'año' deberían ser comunes.")
}
# Columnas que se descartarán de cada dataset porque no son comunes
columnas_descartadas_2020 <- setdiff(nombres_cols_2020, columnas_comunes_finales)
columnas_descartadas_2024 <- setdiff(nombres_cols_2024, columnas_comunes_finales)
if (length(columnas_descartadas_2020) > 0) {
message("\nSe DESCARTARÁN las siguientes columnas del dataset 2020 (porque no tienen un nombre coincidente en 2024):")
print(sort(columnas_descartadas_2020))
}
if (length(columnas_descartadas_2024) > 0) {
message("\nSe DESCARTARÁN las siguientes columnas del dataset 2024 (porque no tienen un nombre coincidente en 2020):")
print(sort(columnas_descartadas_2024))
}
message("\nIMPORTANTE: Si una variable que mide lo mismo tiene nombres DIFERENTES en 2020 y 2024 (ej: 'ingreso' vs 'INGRESOS'),")
message("y quieres conservarla, debes RENOMBRARLA para que los nombres coincidan EXACTAMENTE *antes* de este paso (PASO 4).")
message("De lo contrario, si los nombres no son idénticos, una o ambas versiones de esa variable serán descartadas.")
# Seleccionar solo las columnas comunes en cada dataframe anual
# Usamos all_of() para mayor seguridad con los nombres de columna.
datos_2020_seleccionados <- datos_2020_con_año %>%
select(all_of(columnas_comunes_finales))
datos_2024_seleccionados <- datos_2024_con_año %>%
select(all_of(columnas_comunes_finales))
cat("\nDimensiones de datos 2020 después de seleccionar columnas comunes:", dim(datos_2020_seleccionados), "\n")
cat("Dimensiones de datos 2024 después de seleccionar columnas comunes:", dim(datos_2024_seleccionados), "\n")
# --- PASO 5: Apilar los dataframes de 2020 y 2024 (ahora con columnas idénticas) ---
# `bind_rows` apilará los dataframes. Como ahora tienen exactamente el mismo conjunto de columnas,
# la alineación será perfecta.
datos_apilados_raw <- bind_rows(datos_2020_seleccionados, datos_2024_seleccionados)
cat("\nDimensiones de datos apilados (después de seleccionar columnas comunes, antes de filtrar folios):", dim(datos_apilados_raw), "\n")
cat("Nombres de columnas en datos_apilados_raw:\n")
print(names(datos_apilados_raw))
# --- PASO 6: Filtrar para conservar solo los folios presentes en AMBOS años ---
# (Este código es igual al de la respuesta anterior)
# Contamos cuántos años distintos tiene cada folio en los datos apilados.
folios_con_conteo_años <- datos_apilados_raw %>%
group_by(!!sym(columna_folio)) %>%
summarise(n_años_presente = n_distinct(año), .groups = 'drop')
# Nos quedamos con los folios que están presentes en 2 años distintos
folios_a_mantener <- folios_con_conteo_años %>%
filter(n_años_presente == 2) %>%
pull(!!sym(columna_folio))
# Filtramos el dataframe apilado original para mantener solo estos folios
datos_longitudinales_final <- datos_apilados_raw %>%
filter(!!sym(columna_folio) %in% folios_a_mantener)
# Opcional: Ordenar para ver los datos por folio y luego por año
datos_longitudinales_final <- datos_longitudinales_final %>%
arrange(!!sym(columna_folio), año)
# --- PASO 7: Verificación final ---
# (Este código es igual al de la respuesta anterior)
cat("\nDimensiones finales de datos longitudinales (formato largo, solo columnas comunes):", dim(datos_longitudinales_final), "\n")
cat("Folios únicos en el dataset final (presentes en ambos años):", n_distinct(datos_longitudinales_final[[columna_folio]]), "\n")
# Verificar que cada folio tenga 2 entradas (una por año)
conteo_filas_por_folio <- datos_longitudinales_final %>%
count(!!sym(columna_folio))
cat("\nResumen del número de filas por folio en el dataset final:\n")
print(table(conteo_filas_por_folio$n)) # Debería mostrar solo "2" y su frecuencia.
# Inspeccionar las primeras filas
cat("\nPrimeras filas del dataset longitudinal (formato largo):\n")
print(head(datos_longitudinales_final, 10))
cat("\nNombres de columnas del dataset longitudinal (formato largo):\n")
print(names(datos_longitudinales_final))
View(conteo_filas_por_folio)
View(conteo_filas_por_folio)
View(datos_apilados_raw)
View(datos_longitudinales_final)
